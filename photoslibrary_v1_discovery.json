{
  "name": "photoslibrary",
  "parameters": {
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "alt": {
      "type": "string",
      "description": "Data format for response.",
      "default": "json",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query"
    },
    "callback": {
      "type": "string",
      "description": "JSONP",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query"
    },
    "key": {
      "type": "string",
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query"
    },
    "oauth_token": {
      "type": "string",
      "description": "OAuth 2.0 token for the current user.",
      "location": "query"
    },
    "prettyPrint": {
      "type": "boolean",
      "description": "Returns response with indentations and line breaks.",
      "default": "true",
      "location": "query"
    },
    "quotaUser": {
      "type": "string",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query"
    },
    "upload_protocol": {
      "type": "string",
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query"
    },
    "uploadType": {
      "type": "string",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query"
    },
    "$.xgafv": {
      "type": "string",
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query"
    }
  },
  "fullyEncodeReservedExpansion": true,
  "version_module": true,
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/photoslibrary": {
          "description": "See, upload, and organize items in your Google Photos library"
        },
        "https://www.googleapis.com/auth/photoslibrary.appendonly": {
          "description": "Add to your Google Photos library"
        },
        "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata": {
          "description": "Edit the info in your photos, videos, and albums created within this app, including titles, descriptions, and covers"
        },
        "https://www.googleapis.com/auth/photoslibrary.readonly": {
          "description": "View your Google Photos library"
        },
        "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata": {
          "description": "Manage photos added by this app"
        },
        "https://www.googleapis.com/auth/photoslibrary.sharing": {
          "description": "Manage and add to shared albums on your behalf"
        }
      }
    }
  },
  "baseUrl": "https://photoslibrary.googleapis.com/",
  "protocol": "rest",
  "revision": "20250818",
  "mtlsRootUrl": "https://photoslibrary.mtls.googleapis.com/",
  "documentationLink": "https://developers.google.com/photos/",
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "kind": "discovery#restDescription",
  "batchPath": "batch",
  "servicePath": "",
  "schemas": {
    "CreateAlbumRequest": {
      "id": "CreateAlbumRequest",
      "description": "Request to create an album in Google Photos.",
      "type": "object",
      "properties": {
        "album": {
          "description": "Required. The album to be created.",
          "$ref": "Album"
        }
      }
    },
    "Album": {
      "id": "Album",
      "description": "Representation of an album in Google Photos. Albums are containers for media items. If an album has been shared by the application, it contains an extra `shareInfo` property.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album.",
          "type": "string"
        },
        "title": {
          "description": "Name of the album displayed to the user in their Google Photos account. This string shouldn't be more than 500 characters.",
          "type": "string"
        },
        "productUrl": {
          "description": "[Output only] Google Photos URL for the album. The user needs to be signed in to their Google Photos account to access this link.",
          "type": "string"
        },
        "isWriteable": {
          "description": "[Output only] True if you can create media items in this album. This field is based on the scopes granted and permissions of the album. If the scopes are changed or permissions of the album are changed, this field is updated.",
          "type": "boolean"
        },
        "shareInfo": {
          "description": "[Output only] Information related to shared albums. This field is only populated if the album is a shared album, the developer created the album and the user has granted the `photoslibrary.sharing` scope.",
          "$ref": "ShareInfo"
        },
        "mediaItemsCount": {
          "description": "[Output only] The number of media items in the album.",
          "type": "string",
          "format": "int64"
        },
        "coverPhotoBaseUrl": {
          "description": "[Output only] A URL to the cover photo's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the [developer documentation](https://developers.google.com/photos/library/guides/access-media-items#base-urls) for a complete list of supported parameters. For example, `'=w2048-h1024'` sets the dimensions of the cover photo to have a width of 2048 px and height of 1024 px.",
          "type": "string"
        },
        "coverPhotoMediaItemId": {
          "description": "Identifier for the media item associated with the cover photo.",
          "type": "string"
        }
      }
    },
    "ShareInfo": {
      "id": "ShareInfo",
      "description": "Information about albums that are shared. This information is only included if you created the album, it is shared and you have the sharing scope.",
      "type": "object",
      "properties": {
        "sharedAlbumOptions": {
          "description": "Options that control whether someone can add media items to, or comment on a shared album.",
          "$ref": "SharedAlbumOptions"
        },
        "shareableUrl": {
          "description": "A link to the shared Google Photos album. Anyone with the link can view the contents of the album, so it should be treated with care. The `shareableUrl` parameter is only returned if the album has link sharing turned on. If a user is already joined to an album that isn't link-shared, they can use the album's [`productUrl`](https://developers.google.com/photos/library/reference/rest/v1/albums#Album) to access it instead. A `shareableUrl` is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared.",
          "type": "string"
        },
        "shareToken": {
          "description": "A token that is used to join, leave, or retrieve the details of a shared album on behalf of a user who isn't the owner. A `shareToken` is invalidated if the owner turns off link sharing in the Google Photos app, or if the album is unshared.",
          "type": "string"
        },
        "isJoined": {
          "description": "True if the user is joined to the album. This is always true for the owner of the album.",
          "type": "boolean"
        },
        "isOwned": {
          "description": "True if the user owns the album.",
          "type": "boolean"
        },
        "isJoinable": {
          "description": "True if the album can be joined by users.",
          "type": "boolean"
        }
      }
    },
    "SharedAlbumOptions": {
      "id": "SharedAlbumOptions",
      "description": "Options that control the sharing of an album.",
      "type": "object",
      "properties": {
        "isCollaborative": {
          "description": "True if the shared album allows collaborators (users who have joined the album) to add media items to it. Defaults to false.",
          "type": "boolean"
        },
        "isCommentable": {
          "description": "True if the shared album allows collaborators (users who have joined the album) to add comments to the album. Defaults to false.",
          "type": "boolean"
        }
      }
    },
    "BatchCreateMediaItemsRequest": {
      "id": "BatchCreateMediaItemsRequest",
      "description": "Request to create one or more media items in a user's Google Photos library. If an `albumid` from an app created album is specified, the media items are also added to that album. `albumPosition` is optional and can only be specified if an `albumId` is set.",
      "type": "object",
      "properties": {
        "albumId": {
          "description": "Identifier of the album where the media items are added. The media items are also added to the user's library. This is an optional field.",
          "type": "string"
        },
        "newMediaItems": {
          "description": "Required. List of media items to be created. Maximum 50 media items per call.",
          "type": "array",
          "items": {
            "$ref": "NewMediaItem"
          }
        },
        "albumPosition": {
          "description": "Position in the album where the media items are added. If not specified, the media items are added to the end of the album (as per the default value, that is, `LAST_IN_ALBUM`). The request fails if this field is set and the `albumId` is not specified. The request will also fail if you set the field and are not the owner of the shared album.",
          "$ref": "AlbumPosition"
        }
      }
    },
    "NewMediaItem": {
      "id": "NewMediaItem",
      "description": "New media item that's created in a user's Google Photos account.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Description of the media item. This is shown to the user in the item's info section in the Google Photos app. Must be shorter than 1000 characters. Only include text written by users. Descriptions should add context and help users understand media. Do not include any auto-generated strings such as filenames, tags, and other metadata.",
          "type": "string"
        },
        "simpleMediaItem": {
          "description": "A new media item that has been uploaded via the included `uploadToken`.",
          "$ref": "SimpleMediaItem"
        }
      }
    },
    "SimpleMediaItem": {
      "id": "SimpleMediaItem",
      "description": "A simple media item to be created in Google Photos via an upload token.",
      "type": "object",
      "properties": {
        "uploadToken": {
          "description": "Token identifying the media bytes that have been uploaded to Google.",
          "type": "string"
        },
        "fileName": {
          "description": "File name with extension of the media item. This is shown to the user in Google Photos. The file name specified during the byte upload process is ignored if this field is set. The file name, including the file extension, shouldn't be more than 255 characters. This is an optional field.",
          "type": "string"
        }
      }
    },
    "AlbumPosition": {
      "id": "AlbumPosition",
      "description": "Specifies a position in an album.",
      "type": "object",
      "properties": {
        "position": {
          "description": "Type of position, for a media or enrichment item.",
          "type": "string",
          "enumDescriptions": [
            "Default value if this enum isn't set.",
            "At the beginning of the album.",
            "At the end of the album.",
            "After a media item.",
            "After an enrichment item."
          ],
          "enum": [
            "POSITION_TYPE_UNSPECIFIED",
            "FIRST_IN_ALBUM",
            "LAST_IN_ALBUM",
            "AFTER_MEDIA_ITEM",
            "AFTER_ENRICHMENT_ITEM"
          ]
        },
        "relativeMediaItemId": {
          "description": "The media item to which the position is relative to. Only used when position type is AFTER_MEDIA_ITEM.",
          "type": "string"
        },
        "relativeEnrichmentItemId": {
          "description": "The enrichment item to which the position is relative to. Only used when position type is AFTER_ENRICHMENT_ITEM.",
          "type": "string"
        }
      }
    },
    "BatchCreateMediaItemsResponse": {
      "id": "BatchCreateMediaItemsResponse",
      "description": "List of media items created.",
      "type": "object",
      "properties": {
        "newMediaItemResults": {
          "description": "Output only. List of media items created.",
          "type": "array",
          "items": {
            "$ref": "NewMediaItemResult"
          }
        }
      }
    },
    "NewMediaItemResult": {
      "id": "NewMediaItemResult",
      "description": "Result of creating a new media item.",
      "type": "object",
      "properties": {
        "uploadToken": {
          "description": "The upload token used to create this new (simple) media item. Only populated if the media item is simple and required a single upload token.",
          "type": "string"
        },
        "status": {
          "description": "If an error occurred during the creation of this media item, this field is populated with information related to the error. For details regarding this field, see Status.",
          "$ref": "Status"
        },
        "mediaItem": {
          "description": "Media item created with the upload token. It's populated if no errors occurred and the media item was created successfully.",
          "$ref": "MediaItem"
        }
      }
    },
    "Status": {
      "id": "Status",
      "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
      "type": "object",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
          "type": "string"
        },
        "details": {
          "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "any",
              "description": "Properties of the object. Contains field @type with type URL."
            }
          }
        }
      }
    },
    "MediaItem": {
      "id": "MediaItem",
      "description": "Representation of a media item (such as a photo or video) in Google Photos.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item.",
          "type": "string"
        },
        "description": {
          "description": "Description of the media item. This is shown to the user in the item's info section in the Google Photos app. Must be shorter than 1000 characters. Only include text written by users. Descriptions should add context and help users understand media. Do not include any auto-generated strings such as filenames, tags, and other metadata.",
          "type": "string"
        },
        "productUrl": {
          "description": "Google Photos URL for the media item. This link is available to the user only if they're signed in. When retrieved from an album search, the URL points to the item inside the album.",
          "type": "string"
        },
        "baseUrl": {
          "description": "A URL to the media item's bytes. This shouldn't be used as is. Parameters should be appended to this URL before use. See the [developer documentation](https://developers.google.com/photos/library/guides/access-media-items#base-urls) for a complete list of supported parameters. For example, `'=w2048-h1024'` will set the dimensions of a media item of type photo to have a width of 2048 px and height of 1024 px.",
          "type": "string"
        },
        "mimeType": {
          "description": "MIME type of the media item. For example, `image/jpeg`.",
          "type": "string"
        },
        "mediaMetadata": {
          "description": "Metadata related to the media item, such as, height, width, or creation time.",
          "$ref": "MediaMetadata"
        },
        "contributorInfo": {
          "description": "Information about the user who added this media item. Note that this is only included when using mediaItems.search with the ID of a shared album. The album must be created by your app and you must have the sharing scope.",
          "$ref": "ContributorInfo"
        },
        "filename": {
          "description": "Filename of the media item. This is shown to the user in the item's info section in the Google Photos app.",
          "type": "string"
        }
      }
    },
    "MediaMetadata": {
      "id": "MediaMetadata",
      "description": "Metadata for a media item.",
      "type": "object",
      "properties": {
        "creationTime": {
          "description": "Time when the media item was first created (not when it was uploaded to Google Photos).",
          "type": "string",
          "format": "google-datetime"
        },
        "width": {
          "description": "Original width (in pixels) of the media item.",
          "type": "string",
          "format": "int64"
        },
        "height": {
          "description": "Original height (in pixels) of the media item.",
          "type": "string",
          "format": "int64"
        },
        "photo": {
          "description": "Metadata for a photo media type.",
          "$ref": "Photo"
        },
        "video": {
          "description": "Metadata for a video media type.",
          "$ref": "Video"
        }
      }
    },
    "Photo": {
      "id": "Photo",
      "description": "Metadata that is specific to a photo, such as, ISO, focal length and exposure time. Some of these fields may be null or not included.",
      "type": "object",
      "properties": {
        "cameraMake": {
          "description": "Brand of the camera with which the photo was taken.",
          "type": "string"
        },
        "cameraModel": {
          "description": "Model of the camera with which the photo was taken.",
          "type": "string"
        },
        "focalLength": {
          "description": "Focal length of the camera lens with which the photo was taken.",
          "type": "number",
          "format": "float"
        },
        "apertureFNumber": {
          "description": "Aperture f number of the camera lens with which the photo was taken.",
          "type": "number",
          "format": "float"
        },
        "isoEquivalent": {
          "description": "ISO of the camera with which the photo was taken.",
          "type": "integer",
          "format": "int32"
        },
        "exposureTime": {
          "description": "Exposure time of the camera aperture when the photo was taken.",
          "type": "string",
          "format": "google-duration"
        }
      }
    },
    "Video": {
      "id": "Video",
      "description": "Metadata that is specific to a video, for example, fps and processing status. Some of these fields may be null or not included.",
      "type": "object",
      "properties": {
        "cameraMake": {
          "description": "Brand of the camera with which the video was taken.",
          "type": "string"
        },
        "cameraModel": {
          "description": "Model of the camera with which the video was taken.",
          "type": "string"
        },
        "fps": {
          "description": "Frame rate of the video.",
          "type": "number",
          "format": "double"
        },
        "status": {
          "description": "Processing status of the video.",
          "type": "string",
          "enumDescriptions": [
            "Video processing status is unknown.",
            "Video is being processed. The user sees an icon for this video in the Google Photos app; however, it isn't playable yet.",
            "Video processing is complete and it is now ready for viewing. Important: attempting to download a video not in the READY state may fail.",
            "Something has gone wrong and the video has failed to process."
          ],
          "enum": [
            "UNSPECIFIED",
            "PROCESSING",
            "READY",
            "FAILED"
          ]
        }
      }
    },
    "ContributorInfo": {
      "id": "ContributorInfo",
      "description": "Information about the user who added the media item. Note that this information is included only if the media item is within a shared album created by your app and you have the sharing scope.",
      "type": "object",
      "properties": {
        "profilePictureBaseUrl": {
          "description": "URL to the profile picture of the contributor.",
          "type": "string"
        },
        "displayName": {
          "description": "Display name of the contributor.",
          "type": "string"
        }
      }
    },
    "BatchAddMediaItemsToAlbumRequest": {
      "id": "BatchAddMediaItemsToAlbumRequest",
      "description": "Request to add media items to an app created album.",
      "type": "object",
      "properties": {
        "mediaItemIds": {
          "description": "Required. Identifiers of the MediaItems to be added. The maximum number of media items that can be added in one call is 50.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchAddMediaItemsToAlbumResponse": {
      "id": "BatchAddMediaItemsToAlbumResponse",
      "description": "Response for adding media items to an album.",
      "type": "object",
      "properties": {}
    },
    "SearchMediaItemsRequest": {
      "id": "SearchMediaItemsRequest",
      "description": "Request to search for app created media items in a user's library. If the album id from an app created album is specified, this call will return the list of media items in the album. If neither filters nor album id are specified, this call will return all app created media items in a user's Google Photos library. If filters are specified, this call will return all app created media items in the user's library that fulfill the filter criteria. Filters and album id must not both be set, as this will result in an invalid request.",
      "type": "object",
      "properties": {
        "albumId": {
          "description": "Identifier of an album. If populated, lists all media items in specified album. Can't set in conjunction with any filters.",
          "type": "string"
        },
        "pageSize": {
          "description": "Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default `pageSize` is 25, the maximum is 100.",
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `searchMediaItems` request.",
          "type": "string"
        },
        "filters": {
          "description": "Filters to apply to the request. Can't be set in conjunction with an `albumId`.",
          "$ref": "Filters"
        },
        "orderBy": {
          "description": "An optional field to specify the sort order of the search results. The `orderBy` field only works when a dateFilter is used. When this field is not specified, results are displayed newest first, oldest last by their creationTime. Providing `MediaMetadata.creation_time` displays search results in the opposite order, oldest first then newest last. To display results newest first then oldest last, include the `desc` argument as follows: `MediaMetadata.creation_time desc`. The only additional filters that can be used with this parameter are includeArchivedMedia and excludeNonAppCreatedData. No other filters are supported.",
          "type": "string"
        }
      }
    },
    "Filters": {
      "id": "Filters",
      "description": "Filters that can be applied to a media item search. If multiple filter options are specified, they're treated as AND with each other.",
      "type": "object",
      "properties": {
        "dateFilter": {
          "description": "Filters the media items based on their creation date.",
          "$ref": "DateFilter"
        },
        "contentFilter": {
          "description": "Filters the media items based on their content.",
          "$ref": "ContentFilter"
        },
        "mediaTypeFilter": {
          "description": "Filters the media items based on the type of media.",
          "$ref": "MediaTypeFilter"
        },
        "featureFilter": {
          "description": "Filters the media items based on their features.",
          "$ref": "FeatureFilter"
        },
        "includeArchivedMedia": {
          "description": "If set, the results include media items that the user has archived. Defaults to false (archived media items aren't included).",
          "type": "boolean"
        },
        "excludeNonAppCreatedData": {
          "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all media items are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used.",
          "type": "boolean"
        }
      }
    },
    "DateFilter": {
      "id": "DateFilter",
      "description": "This filter defines the allowed dates or date ranges for the media returned. It's possible to pick a set of specific dates and a set of date ranges. Media items uploaded without metadata specifying the date the media item was captured will not be returned in queries using date filters. Google Photos server upload time is not used as a fallback in this case.",
      "type": "object",
      "properties": {
        "dates": {
          "description": "List of dates that match the media items' creation date. A maximum of 5 dates can be included per request.",
          "type": "array",
          "items": {
            "$ref": "Date"
          }
        },
        "ranges": {
          "description": "List of dates ranges that match the media items' creation date. A maximum of 5 dates ranges can be included per request.",
          "type": "array",
          "items": {
            "$ref": "DateRange"
          }
        }
      }
    },
    "Date": {
      "id": "Date",
      "description": "Represents a whole calendar date. Set `day` to 0 when only the month and year are significant, for example, all of December 2018. Set `day` and `month` to 0 if only the year is significant, for example, the entire of 2018. Set `year` to 0 when only the day and month are significant, for example, an anniversary or birthday. Unsupported: Setting all values to 0, only `month` to 0, or both `day` and `year` to 0 at the same time.",
      "type": "object",
      "properties": {
        "year": {
          "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
          "type": "integer",
          "format": "int32"
        },
        "day": {
          "description": "Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day isn't significant.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DateRange": {
      "id": "DateRange",
      "description": "Defines a range of dates. Both dates must be of the same format. For more information, see Date.",
      "type": "object",
      "properties": {
        "startDate": {
          "description": "The start date (included as part of the range) in one of the formats described.",
          "$ref": "Date"
        },
        "endDate": {
          "description": "The end date (included as part of the range). It must be specified in the same format as the start date.",
          "$ref": "Date"
        }
      }
    },
    "ContentFilter": {
      "id": "ContentFilter",
      "description": "This filter allows you to return media items based on the content type. It's possible to specify a list of categories to include, and/or a list of categories to exclude. Within each list, the categories are combined with an OR. The content filter `includedContentCategories`: [c1, c2, c3] would get media items that contain (c1 OR c2 OR c3). The content filter `excludedContentCategories`: [c1, c2, c3] would NOT get media items that contain (c1 OR c2 OR c3). You can also include some categories while excluding others, as in this example: `includedContentCategories`: [c1, c2], `excludedContentCategories`: [c3, c4] The previous example would get media items that contain (c1 OR c2) AND NOT (c3 OR c4). A category that appears in `includedContentategories` must not appear in `excludedContentCategories`.",
      "type": "object",
      "properties": {
        "includedContentCategories": {
          "description": "The set of categories to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 `includedContentCategories` per request.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default content category. This category is ignored when any other category is used in the filter.",
              "Media items containing landscapes.",
              "Media items containing receipts.",
              "Media items containing cityscapes.",
              "Media items containing landmarks.",
              "Media items that are selfies.",
              "Media items containing people.",
              "Media items containing pets.",
              "Media items from weddings.",
              "Media items from birthdays.",
              "Media items containing documents.",
              "Media items taken during travel.",
              "Media items containing animals.",
              "Media items containing food.",
              "Media items from sporting events.",
              "Media items taken at night.",
              "Media items from performances.",
              "Media items containing whiteboards.",
              "Media items that are screenshots.",
              "Media items that are considered to be utility. These include, but aren't limited to documents, screenshots, whiteboards etc.",
              "Media items containing art.",
              "Media items containing crafts.",
              "Media items related to fashion.",
              "Media items containing houses.",
              "Media items containing gardens.",
              "Media items containing flowers.",
              "Media items taken of holidays."
            ],
            "enum": [
              "NONE",
              "LANDSCAPES",
              "RECEIPTS",
              "CITYSCAPES",
              "LANDMARKS",
              "SELFIES",
              "PEOPLE",
              "PETS",
              "WEDDINGS",
              "BIRTHDAYS",
              "DOCUMENTS",
              "TRAVEL",
              "ANIMALS",
              "FOOD",
              "SPORT",
              "NIGHT",
              "PERFORMANCES",
              "WHITEBOARDS",
              "SCREENSHOTS",
              "UTILITY",
              "ARTS",
              "CRAFTS",
              "FASHION",
              "HOUSES",
              "GARDENS",
              "FLOWERS",
              "HOLIDAYS"
            ]
          }
        },
        "excludedContentCategories": {
          "description": "The set of categories which are not to be included in the media item search results. The items in the set are ORed. There's a maximum of 10 `excludedContentCategories` per request.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Default content category. This category is ignored when any other category is used in the filter.",
              "Media items containing landscapes.",
              "Media items containing receipts.",
              "Media items containing cityscapes.",
              "Media items containing landmarks.",
              "Media items that are selfies.",
              "Media items containing people.",
              "Media items containing pets.",
              "Media items from weddings.",
              "Media items from birthdays.",
              "Media items containing documents.",
              "Media items taken during travel.",
              "Media items containing animals.",
              "Media items containing food.",
              "Media items from sporting events.",
              "Media items taken at night.",
              "Media items from performances.",
              "Media items containing whiteboards.",
              "Media items that are screenshots.",
              "Media items that are considered to be utility. These include, but aren't limited to documents, screenshots, whiteboards etc.",
              "Media items containing art.",
              "Media items containing crafts.",
              "Media items related to fashion.",
              "Media items containing houses.",
              "Media items containing gardens.",
              "Media items containing flowers.",
              "Media items taken of holidays."
            ],
            "enum": [
              "NONE",
              "LANDSCAPES",
              "RECEIPTS",
              "CITYSCAPES",
              "LANDMARKS",
              "SELFIES",
              "PEOPLE",
              "PETS",
              "WEDDINGS",
              "BIRTHDAYS",
              "DOCUMENTS",
              "TRAVEL",
              "ANIMALS",
              "FOOD",
              "SPORT",
              "NIGHT",
              "PERFORMANCES",
              "WHITEBOARDS",
              "SCREENSHOTS",
              "UTILITY",
              "ARTS",
              "CRAFTS",
              "FASHION",
              "HOUSES",
              "GARDENS",
              "FLOWERS",
              "HOLIDAYS"
            ]
          }
        }
      }
    },
    "MediaTypeFilter": {
      "id": "MediaTypeFilter",
      "description": "This filter defines the type of media items to be returned, for example, videos or photos. Only one media type is supported.",
      "type": "object",
      "properties": {
        "mediaTypes": {
          "description": "The types of media items to be included. This field should be populated with only one media type. If you specify multiple media types, it results in an error.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Treated as if no filters are applied. All media types are included.",
              "All media items that are considered videos. This also includes movies the user has created using the Google Photos app.",
              "All media items that are considered photos. This includes .bmp, .gif, .ico, .jpg (and other spellings), .tiff, .webp and special photo types such as iOS live photos, Android motion photos, panoramas, photospheres."
            ],
            "enum": [
              "ALL_MEDIA",
              "VIDEO",
              "PHOTO"
            ]
          }
        }
      }
    },
    "FeatureFilter": {
      "id": "FeatureFilter",
      "description": "This filter defines the features that the media items should have.",
      "type": "object",
      "properties": {
        "includedFeatures": {
          "description": "The set of features to be included in the media item search results. The items in the set are ORed and may match any of the specified features.",
          "type": "array",
          "items": {
            "type": "string",
            "enumDescriptions": [
              "Treated as if no filters are applied. All features are included.",
              "Media items that the user has marked as favorites in the Google Photos app."
            ],
            "enum": [
              "NONE",
              "FAVORITES"
            ]
          }
        }
      }
    },
    "SearchMediaItemsResponse": {
      "id": "SearchMediaItemsResponse",
      "description": "List of media items that match the search parameters.",
      "type": "object",
      "properties": {
        "mediaItems": {
          "description": "Output only. List of media items that match the search parameters.",
          "type": "array",
          "items": {
            "$ref": "MediaItem"
          }
        },
        "nextPageToken": {
          "description": "Output only. Use this token to get the next set of media items. Its presence is the only reliable indicator of more media items being available in the next request.",
          "type": "string"
        }
      }
    },
    "ListMediaItemsResponse": {
      "id": "ListMediaItemsResponse",
      "description": "List of all media items from the user's Google Photos library.",
      "type": "object",
      "properties": {
        "mediaItems": {
          "description": "Output only. List of media items in the user's library.",
          "type": "array",
          "items": {
            "$ref": "MediaItem"
          }
        },
        "nextPageToken": {
          "description": "Output only. Token to use to get the next set of media items. Its presence is the only reliable indicator of more media items being available in the next request.",
          "type": "string"
        }
      }
    },
    "BatchGetMediaItemsResponse": {
      "id": "BatchGetMediaItemsResponse",
      "description": "Response to retrieve a list of app created media items.",
      "type": "object",
      "properties": {
        "mediaItemResults": {
          "description": "Output only. List of media items retrieved. Note that even if the call to BatchGetMediaItems succeeds, there may have been failures for some media items in the batch. These failures are indicated in each MediaItemResult.status.",
          "type": "array",
          "items": {
            "$ref": "MediaItemResult"
          }
        }
      }
    },
    "MediaItemResult": {
      "id": "MediaItemResult",
      "description": "Result of retrieving a media item.",
      "type": "object",
      "properties": {
        "status": {
          "description": "If an error occurred while accessing this media item, this field is populated with information related to the error. For details regarding this field, see Status.",
          "$ref": "Status"
        },
        "mediaItem": {
          "description": "Media item retrieved from the user's library. It's populated if no errors occurred and the media item was fetched successfully.",
          "$ref": "MediaItem"
        }
      }
    },
    "ListAlbumsResponse": {
      "id": "ListAlbumsResponse",
      "description": "List of albums requested.",
      "type": "object",
      "properties": {
        "albums": {
          "description": "Output only. List of albums shown in the Albums tab of the user's Google Photos app.",
          "type": "array",
          "items": {
            "$ref": "Album"
          }
        },
        "nextPageToken": {
          "description": "Output only. Token to use to get the next set of albums. Populated if there are more albums to retrieve for this request.",
          "type": "string"
        }
      }
    },
    "AddEnrichmentToAlbumRequest": {
      "id": "AddEnrichmentToAlbumRequest",
      "description": "Request to add an enrichment to a specific album at a specific position.",
      "type": "object",
      "properties": {
        "newEnrichmentItem": {
          "description": "Required. The enrichment to be added.",
          "$ref": "NewEnrichmentItem"
        },
        "albumPosition": {
          "description": "Required. The position in the app created album where the enrichment is to be inserted.",
          "$ref": "AlbumPosition"
        }
      }
    },
    "NewEnrichmentItem": {
      "id": "NewEnrichmentItem",
      "description": "A new enrichment item to be added to an app created album, used by the `albums.addEnrichment` call.",
      "type": "object",
      "properties": {
        "textEnrichment": {
          "description": "Text to be added to the app created album.",
          "$ref": "TextEnrichment"
        },
        "locationEnrichment": {
          "description": "Location to be added to the app created album.",
          "$ref": "LocationEnrichment"
        },
        "mapEnrichment": {
          "description": "Map to be added to the app created album.",
          "$ref": "MapEnrichment"
        }
      }
    },
    "TextEnrichment": {
      "id": "TextEnrichment",
      "description": "An enrichment containing text.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Text for this enrichment item.",
          "type": "string"
        }
      }
    },
    "LocationEnrichment": {
      "id": "LocationEnrichment",
      "description": "An enrichment containing a single location.",
      "type": "object",
      "properties": {
        "location": {
          "description": "Location for this enrichment item.",
          "$ref": "Location"
        }
      }
    },
    "Location": {
      "id": "Location",
      "description": "Represents a physical location.",
      "type": "object",
      "properties": {
        "locationName": {
          "description": "Name of the location to be displayed.",
          "type": "string"
        },
        "latlng": {
          "description": "Position of the location on the map.",
          "$ref": "LatLng"
        }
      }
    },
    "LatLng": {
      "id": "LatLng",
      "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
          "type": "number",
          "format": "double"
        }
      }
    },
    "MapEnrichment": {
      "id": "MapEnrichment",
      "description": "An enrichment containing a map, showing origin and destination locations.",
      "type": "object",
      "properties": {
        "origin": {
          "description": "Origin location for this enrichment item.",
          "$ref": "Location"
        },
        "destination": {
          "description": "Destination location for this enrichemt item.",
          "$ref": "Location"
        }
      }
    },
    "AddEnrichmentToAlbumResponse": {
      "id": "AddEnrichmentToAlbumResponse",
      "description": "The enrichment item that's created.",
      "type": "object",
      "properties": {
        "enrichmentItem": {
          "description": "Output only. Enrichment which was added.",
          "$ref": "EnrichmentItem"
        }
      }
    },
    "EnrichmentItem": {
      "id": "EnrichmentItem",
      "description": "An enrichment item.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Identifier of the enrichment item.",
          "type": "string"
        }
      }
    },
    "JoinSharedAlbumRequest": {
      "id": "JoinSharedAlbumRequest",
      "description": "Request to join a shared album on behalf of the user. This uses a shareToken which can be acquired via the shareAlbum or listSharedAlbums calls.",
      "type": "object",
      "properties": {
        "shareToken": {
          "description": "Required. Token to join the shared album on behalf of the user.",
          "type": "string"
        }
      }
    },
    "JoinSharedAlbumResponse": {
      "id": "JoinSharedAlbumResponse",
      "description": "Response to successfully joining the shared album on behalf of the user.",
      "type": "object",
      "properties": {
        "album": {
          "description": "Shared album that the user has joined.",
          "$ref": "Album"
        }
      }
    },
    "LeaveSharedAlbumRequest": {
      "id": "LeaveSharedAlbumRequest",
      "description": "Request to leave a shared album on behalf of the user. This uses a shareToken which can be acquired via the or listSharedAlbums or getAlbum calls.",
      "type": "object",
      "properties": {
        "shareToken": {
          "description": "Required. Token to leave the shared album on behalf of the user.",
          "type": "string"
        }
      }
    },
    "LeaveSharedAlbumResponse": {
      "id": "LeaveSharedAlbumResponse",
      "description": "Response to successfully leaving the shared album on behalf of the user.",
      "type": "object",
      "properties": {}
    },
    "ShareAlbumRequest": {
      "id": "ShareAlbumRequest",
      "description": "Request to make an album shared in Google Photos.",
      "type": "object",
      "properties": {
        "sharedAlbumOptions": {
          "description": "Options to be set when converting the album to a shared album.",
          "$ref": "SharedAlbumOptions"
        }
      }
    },
    "ShareAlbumResponse": {
      "id": "ShareAlbumResponse",
      "description": "Response to successfully sharing an album.",
      "type": "object",
      "properties": {
        "shareInfo": {
          "description": "Output only. Information about the shared album.",
          "$ref": "ShareInfo"
        }
      }
    },
    "ListSharedAlbumsResponse": {
      "id": "ListSharedAlbumsResponse",
      "description": "List of shared albums requested.",
      "type": "object",
      "properties": {
        "sharedAlbums": {
          "description": "Output only. List of shared albums.",
          "type": "array",
          "items": {
            "$ref": "Album"
          }
        },
        "nextPageToken": {
          "description": "Output only. Token to use to get the next set of shared albums. Populated if there are more shared albums to retrieve for this request.",
          "type": "string"
        }
      }
    },
    "UnshareAlbumRequest": {
      "id": "UnshareAlbumRequest",
      "description": "Request to unshare a shared album in Google Photos.",
      "type": "object",
      "properties": {}
    },
    "UnshareAlbumResponse": {
      "id": "UnshareAlbumResponse",
      "description": "Response of a successful unshare of a shared album.",
      "type": "object",
      "properties": {}
    },
    "BatchRemoveMediaItemsFromAlbumRequest": {
      "id": "BatchRemoveMediaItemsFromAlbumRequest",
      "description": "Request to remove a list of media items from an album.",
      "type": "object",
      "properties": {
        "mediaItemIds": {
          "description": "Required. Identifiers of the MediaItems to be removed. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be removed in one call is 50.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BatchRemoveMediaItemsFromAlbumResponse": {
      "id": "BatchRemoveMediaItemsFromAlbumResponse",
      "description": "Response for successfully removing all specified media items from the album.",
      "type": "object",
      "properties": {}
    }
  },
  "id": "photoslibrary:v1",
  "resources": {
    "albums": {
      "methods": {
        "create": {
          "id": "photoslibrary.albums.create",
          "path": "v1/albums",
          "flatPath": "v1/albums",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "CreateAlbumRequest"
          },
          "response": {
            "$ref": "Album"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Creates an album in a user's Google Photos library."
        },
        "batchAddMediaItems": {
          "id": "photoslibrary.albums.batchAddMediaItems",
          "path": "v1/albums/{+albumId}:batchAddMediaItems",
          "flatPath": "v1/albums/{albumsId}:batchAddMediaItems",
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the Album that the media items are added to.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "request": {
            "$ref": "BatchAddMediaItemsToAlbumRequest"
          },
          "response": {
            "$ref": "BatchAddMediaItemsToAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Adds one or more app created media items in a user's Google Photos library to an app created album. The media items and albums must have been created by the developer via the API. Media items are added to the end of the album. If multiple media items are given, they are added in the order specified in this call. Each album can contain up to 20,000 media items. Partial success is not supported. The entire request will fail if an invalid media item or album is specified."
        },
        "list": {
          "id": "photoslibrary.albums.list",
          "path": "v1/albums",
          "flatPath": "v1/albums",
          "httpMethod": "GET",
          "parameters": {
            "pageSize": {
              "description": "Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default `pageSize` is 20, the maximum is 50.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listAlbums` request.",
              "location": "query",
              "type": "string"
            },
            "excludeNonAppCreatedData": {
              "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used.",
              "location": "query",
              "type": "boolean"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "ListAlbumsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Lists all albums created by your app."
        },
        "get": {
          "id": "photoslibrary.albums.get",
          "path": "v1/albums/{+albumId}",
          "flatPath": "v1/albums/{albumsId}",
          "httpMethod": "GET",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the album to be requested.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "response": {
            "$ref": "Album"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Returns the app created album based on the specified `albumId`. The `albumId` must be the ID of an album created by your app."
        },
        "addEnrichment": {
          "id": "photoslibrary.albums.addEnrichment",
          "path": "v1/albums/{+albumId}:addEnrichment",
          "flatPath": "v1/albums/{albumsId}:addEnrichment",
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the app created album where the enrichment is to be added.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "request": {
            "$ref": "AddEnrichmentToAlbumRequest"
          },
          "response": {
            "$ref": "AddEnrichmentToAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Adds an enrichment at a specified position in an app created created album."
        },
        "share": {
          "id": "photoslibrary.albums.share",
          "path": "v1/albums/{+albumId}:share",
          "flatPath": "v1/albums/{albumsId}:share",
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the album to be shared. This `albumId` must belong to an album created by the developer.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "request": {
            "$ref": "ShareAlbumRequest"
          },
          "response": {
            "$ref": "ShareAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Marks an album as shared and accessible to other users. This action can only be performed on albums which were created by the developer via the API."
        },
        "unshare": {
          "id": "photoslibrary.albums.unshare",
          "path": "v1/albums/{+albumId}:unshare",
          "flatPath": "v1/albums/{albumsId}:unshare",
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the album to be unshared. This album id must belong to an album created by the developer.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "request": {
            "$ref": "UnshareAlbumRequest"
          },
          "response": {
            "$ref": "UnshareAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Marks a previously shared album as private. This means that the album is no longer shared and all the non-owners will lose access to the album. All non-owner content will be removed from the album. If a non-owner has previously added the album to their library, they will retain all photos in their library. This action can only be performed on albums which were created by the developer via the API."
        },
        "batchRemoveMediaItems": {
          "id": "photoslibrary.albums.batchRemoveMediaItems",
          "path": "v1/albums/{+albumId}:batchRemoveMediaItems",
          "flatPath": "v1/albums/{albumsId}:batchRemoveMediaItems",
          "httpMethod": "POST",
          "parameters": {
            "albumId": {
              "description": "Required. Identifier of the Album that the media items are to be removed from.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "albumId"
          ],
          "request": {
            "$ref": "BatchRemoveMediaItemsFromAlbumRequest"
          },
          "response": {
            "$ref": "BatchRemoveMediaItemsFromAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata"
          ],
          "description": "Removes one or more app created media items from a specified app created album. The media items and the album must have been created by the developer via the API. Partial success is not supported. The entire request will fail and no action will be performed on the album if an invalid media item or album is specified."
        },
        "patch": {
          "id": "photoslibrary.albums.patch",
          "path": "v1/albums/{+id}",
          "flatPath": "v1/albums/{albumsId}",
          "httpMethod": "PATCH",
          "parameters": {
            "id": {
              "description": "Identifier for the album. This is a persistent identifier that can be used between sessions to identify this album.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "updateMask": {
              "description": "Required. Indicate what fields in the provided album to update. The only valid values are `title` and `cover_photo_media_item_id`.",
              "location": "query",
              "type": "string",
              "format": "google-fieldmask"
            }
          },
          "parameterOrder": [
            "id"
          ],
          "request": {
            "$ref": "Album"
          },
          "response": {
            "$ref": "Album"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata"
          ],
          "description": "Update the app created album with the specified `id`. Only the `id`, `title` and `cover_photo_media_item_id` fields of the album are read. The album must have been created by the developer via the API."
        }
      }
    },
    "mediaItems": {
      "methods": {
        "batchCreate": {
          "id": "photoslibrary.mediaItems.batchCreate",
          "path": "v1/mediaItems:batchCreate",
          "flatPath": "v1/mediaItems:batchCreate",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "BatchCreateMediaItemsRequest"
          },
          "response": {
            "$ref": "BatchCreateMediaItemsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.appendonly",
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Creates one or more media items in a user's Google Photos library. This is the second step for creating a media item. For details regarding Step 1, uploading the raw bytes to a Google Server, see Uploading media. This call adds the media item to the library. If an app created album `id` is specified, the call adds the media item to the album too. Each album can contain up to 20,000 media items. By default, the media item will be added to the end of the library or album. If an album `id` and position are both defined, the media item is added to the album at the specified position. If the call contains multiple media items, they're added at the specified position."
        },
        "search": {
          "id": "photoslibrary.mediaItems.search",
          "path": "v1/mediaItems:search",
          "flatPath": "v1/mediaItems:search",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "SearchMediaItemsRequest"
          },
          "response": {
            "$ref": "SearchMediaItemsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Searches for app created media items in a user's Google Photos library. Only media items and ablums created by your app are returned. If no filters are set, then all app created media items in the user's library are returned. If an app created album is set, all media items in the specified album are returned. If filters are specified, app created media items that match the filters from the user's library are listed. If you set both the album and the filters, the request results in an error."
        },
        "list": {
          "id": "photoslibrary.mediaItems.list",
          "path": "v1/mediaItems",
          "flatPath": "v1/mediaItems",
          "httpMethod": "GET",
          "parameters": {
            "pageSize": {
              "description": "Maximum number of media items to return in the response. Fewer media items might be returned than the specified number. The default `pageSize` is 25, the maximum is 100.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listMediaItems` request.",
              "location": "query",
              "type": "string"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "ListMediaItemsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "List all media items created by your app from a user's Google Photos library."
        },
        "get": {
          "id": "photoslibrary.mediaItems.get",
          "path": "v1/mediaItems/{+mediaItemId}",
          "flatPath": "v1/mediaItems/{mediaItemsId}",
          "httpMethod": "GET",
          "parameters": {
            "mediaItemId": {
              "description": "Required. Identifier of the media item to be requested.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "mediaItemId"
          ],
          "response": {
            "$ref": "MediaItem"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Returns the app created media item for the specified media item identifier."
        },
        "batchGet": {
          "id": "photoslibrary.mediaItems.batchGet",
          "path": "v1/mediaItems:batchGet",
          "flatPath": "v1/mediaItems:batchGet",
          "httpMethod": "GET",
          "parameters": {
            "mediaItemIds": {
              "description": "Required. Identifiers of the media items to be requested. Must not contain repeated identifiers and cannot be empty. The maximum number of media items that can be retrieved in one call is 50.",
              "location": "query",
              "repeated": true,
              "type": "string"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "BatchGetMediaItemsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Returns the list of app created media items for the specified media item identifiers. Items are returned in the same order as the supplied identifiers."
        },
        "patch": {
          "id": "photoslibrary.mediaItems.patch",
          "path": "v1/mediaItems/{+id}",
          "flatPath": "v1/mediaItems/{mediaItemsId}",
          "httpMethod": "PATCH",
          "parameters": {
            "id": {
              "description": "Identifier for the media item. This is a persistent identifier that can be used between sessions to identify this media item.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            },
            "updateMask": {
              "description": "Required. Indicate what fields in the provided media item to update. The only valid value is `description`.",
              "location": "query",
              "type": "string",
              "format": "google-fieldmask"
            }
          },
          "parameterOrder": [
            "id"
          ],
          "request": {
            "$ref": "MediaItem"
          },
          "response": {
            "$ref": "MediaItem"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.edit.appcreateddata"
          ],
          "description": "Update the app created media item with the specified `id`. Only the `id` and `description` fields of the media item are read. The media item must have been created by the developer via the API."
        }
      }
    },
    "sharedAlbums": {
      "methods": {
        "get": {
          "id": "photoslibrary.sharedAlbums.get",
          "path": "v1/sharedAlbums/{+shareToken}",
          "flatPath": "v1/sharedAlbums/{sharedAlbumsId}",
          "httpMethod": "GET",
          "parameters": {
            "shareToken": {
              "description": "Required. Share token of the album to be requested.",
              "pattern": "^[^/]+$",
              "location": "path",
              "required": true,
              "type": "string"
            }
          },
          "parameterOrder": [
            "shareToken"
          ],
          "response": {
            "$ref": "Album"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "*Beginning March 31, 2025, this method will no longer work. Some or all of the scopes previously used for this method are being removed. Please see Photos APIs updates for more details.* Returns the album based on the specified `shareToken`."
        },
        "join": {
          "id": "photoslibrary.sharedAlbums.join",
          "path": "v1/sharedAlbums:join",
          "flatPath": "v1/sharedAlbums:join",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "JoinSharedAlbumRequest"
          },
          "response": {
            "$ref": "JoinSharedAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Joins a shared album on behalf of the Google Photos user."
        },
        "leave": {
          "id": "photoslibrary.sharedAlbums.leave",
          "path": "v1/sharedAlbums:leave",
          "flatPath": "v1/sharedAlbums:leave",
          "httpMethod": "POST",
          "parameters": {},
          "parameterOrder": [],
          "request": {
            "$ref": "LeaveSharedAlbumRequest"
          },
          "response": {
            "$ref": "LeaveSharedAlbumResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary.sharing"
          ],
          "description": "Leaves a previously-joined shared album on behalf of the Google Photos user. The user must not own this album."
        },
        "list": {
          "id": "photoslibrary.sharedAlbums.list",
          "path": "v1/sharedAlbums",
          "flatPath": "v1/sharedAlbums",
          "httpMethod": "GET",
          "parameters": {
            "pageSize": {
              "description": "Maximum number of albums to return in the response. Fewer albums might be returned than the specified number. The default `pageSize` is 20, the maximum is 50.",
              "location": "query",
              "type": "integer",
              "format": "int32"
            },
            "pageToken": {
              "description": "A continuation token to get the next page of the results. Adding this to the request returns the rows after the `pageToken`. The `pageToken` should be the value returned in the `nextPageToken` parameter in the response to the `listSharedAlbums` request.",
              "location": "query",
              "type": "string"
            },
            "excludeNonAppCreatedData": {
              "description": "If set, the results exclude media items that were not created by this app. Defaults to false (all albums are returned). This field is ignored if the photoslibrary.readonly.appcreateddata scope is used.",
              "location": "query",
              "type": "boolean"
            }
          },
          "parameterOrder": [],
          "response": {
            "$ref": "ListSharedAlbumsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/photoslibrary",
            "https://www.googleapis.com/auth/photoslibrary.readonly",
            "https://www.googleapis.com/auth/photoslibrary.readonly.appcreateddata"
          ],
          "description": "Lists all shared albums available in the Sharing tab of the user's Google Photos app."
        }
      }
    }
  },
  "rootUrl": "https://photoslibrary.googleapis.com/",
  "ownerName": "Google",
  "discoveryVersion": "v1",
  "canonicalName": "Photos Library",
  "title": "Photos Library API",
  "ownerDomain": "google.com",
  "version": "v1",
  "basePath": "",
  "description": "Manage photos, videos, and albums created by your app in Google Photos "
}
